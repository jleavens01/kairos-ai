// AI 콘텐츠 제작 - 스토리보드 생성
// 원고를 바탕으로 시각적 스토리보드 생성 (기존 시스템 활용)
import { createClient } from '@supabase/supabase-js';
import { generateImage } from './generateFluxImage.js'; // 기존 이미지 생성 활용

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

export const handler = async (event) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { contentItemId, scriptData, scenes, projectId } = JSON.parse(event.body);
    
    console.log('스토리보드 생성 시작:', { contentItemId, projectId });
    
    // 1. 프로젝트 생성 또는 연결
    let targetProjectId = projectId;
    
    if (!targetProjectId) {
      // 새 프로젝트 생성
      const { data: project, error: projectError } = await supabaseAdmin
        .from('projects')
        .insert({
          name: scriptData.title,
          description: `AI 자동 생성: ${scriptData.title}`,
          status: 'in_progress',
          metadata: {
            contentItemId,
            autoGenerated: true,
            channel: 'world-knowledge'
          }
        })
        .select()
        .single();
      
      if (projectError) throw projectError;
      targetProjectId = project.id;
    }
    
    // 2. production_sheets에 씬 데이터 저장 (기존 테이블 활용)
    const productionSheets = [];
    
    for (const scene of scenes) {
      const { data: sheet, error: sheetError } = await supabaseAdmin
        .from('production_sheets')
        .insert({
          project_id: targetProjectId,
          scene_number: scene.scene_number,
          scene_title: scene.scene_type,
          original_script_text: scene.script_text,
          visual_description: scene.visual_cues?.join('\n'),
          duration_seconds: parseFloat(scene.duration) * 60, // 분을 초로 변환
          metadata: {
            contentItemId,
            keyPoints: scene.key_points,
            autoGenerated: true
          }
        })
        .select()
        .single();
      
      if (sheetError) throw sheetError;
      productionSheets.push(sheet);
    }
    
    // 3. 핵심 씬에 대해 이미지 생성 (기존 generateFluxImage 활용)
    const keyScenes = productionSheets.filter(sheet => 
      ['hook', 'climax', 'main'].includes(sheet.scene_title)
    ).slice(0, 5); // 최대 5개 씬만 생성
    
    const imageGenerationTasks = [];
    
    for (const scene of keyScenes) {
      // 이미지 프롬프트 생성
      const imagePrompt = await generateImagePrompt(scene);
      
      // 기존 이미지 생성 시스템 활용
      const imageTask = generateImage({
        projectId: targetProjectId,
        prompt: imagePrompt,
        model: 'flux-schnell',
        imageSize: '16:9',
        category: 'scene',
        sceneId: scene.id,
        styleName: 'educational infographic',
        user: { sub: 'ai-agent' },
        supabaseAdmin
      });
      
      imageGenerationTasks.push(imageTask);
    }
    
    // 병렬로 이미지 생성
    const imageResults = await Promise.allSettled(imageGenerationTasks);
    
    // 4. 생성된 이미지 URL을 production_sheets에 업데이트
    for (let i = 0; i < imageResults.length; i++) {
      if (imageResults[i].status === 'fulfilled' && imageResults[i].value?.success) {
        const imageData = imageResults[i].value.data;
        await supabaseAdmin
          .from('production_sheets')
          .update({
            scene_image_url: imageData.result_image_url || imageData.storage_image_url
          })
          .eq('id', keyScenes[i].id);
      }
    }
    
    // 5. 작업 완료 기록
    const { data: task } = await supabaseAdmin
      .from('agent_tasks')
      .insert({
        content_item_id: contentItemId,
        agent_type: 'visual_director',
        task_type: 'storyboard_generation',
        status: 'completed',
        result: {
          projectId: targetProjectId,
          scenesCreated: productionSheets.length,
          imagesGenerated: imageResults.filter(r => r.status === 'fulfilled').length
        },
        completed_at: new Date().toISOString()
      })
      .select()
      .single();
    
    // 6. 다음 단계: 비디오 생성 준비 (선택적)
    await prepareVideoGeneration(targetProjectId, productionSheets);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        data: {
          projectId: targetProjectId,
          sheets: productionSheets,
          imagesGenerated: imageResults.filter(r => r.status === 'fulfilled').length
        },
        message: '스토리보드가 생성되었습니다.'
      })
    };
    
  } catch (error) {
    console.error('스토리보드 생성 오류:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: error.message
      })
    };
  }
};

// 씬에 맞는 이미지 프롬프트 생성
async function generateImagePrompt(scene) {
  const basePrompt = scene.visual_description || scene.original_script_text;
  
  // 세상의모든지식 스타일 추가
  const styleModifiers = [
    'clean infographic style',
    'educational illustration',
    'bright and professional',
    'easy to understand visual',
    'Korean YouTube educational content style'
  ];
  
  // 씬 타입별 특화 프롬프트
  const sceneTypePrompts = {
    'hook': 'eye-catching, question mark, curious expression',
    'intro': 'title card, channel branding, topic introduction',
    'main': 'informative diagram, step by step explanation',
    'climax': 'aha moment, light bulb, breakthrough discovery',
    'conclusion': 'summary, key takeaways, future implications'
  };
  
  const typePrompt = sceneTypePrompts[scene.scene_title] || '';
  
  return `${basePrompt}, ${typePrompt}, ${styleModifiers.join(', ')}`;
}

// 비디오 생성 준비
async function prepareVideoGeneration(projectId, sheets) {
  try {
    // 비디오 생성이 필요한 씬 식별
    const videoScenes = sheets.filter(sheet => 
      sheet.scene_image_url && sheet.duration_seconds > 3
    );
    
    if (videoScenes.length > 0) {
      // 비디오 생성 작업 생성 (나중에 처리)
      await supabaseAdmin
        .from('agent_tasks')
        .insert({
          content_item_id: projectId,
          agent_type: 'animator',
          task_type: 'video_generation',
          status: 'pending',
          priority: 70,
          parameters: {
            projectId,
            scenes: videoScenes.map(s => s.id),
            style: 'educational-animation'
          }
        });
    }
  } catch (error) {
    console.error('비디오 준비 실패:', error);
  }
}